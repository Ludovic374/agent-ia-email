import sqlite3

DATABASE_NAME = "emails.db"

def creer_base():
    """CrÃ©e la base de donnÃ©es des e-mails si elle n'existe pas."""
    print("ðŸ”„ CrÃ©ation de emails.db en cours...")
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS emails (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sujet TEXT,
            expediteur TEXT,
            date TEXT,
            contenu TEXT
        )
    ''')
    conn.commit()
    conn.close()
    print("âœ… Base emails.db crÃ©Ã©e avec succÃ¨s !")

def ajouter_email(sujet, expediteur, date, contenu):
    """Ajoute un e-mail Ã  la base de donnÃ©es."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO emails (sujet, expediteur, date, contenu) VALUES (?, ?, ?, ?)",
                   (sujet, expediteur, date, contenu))
    conn.commit()
    conn.close()
    print("âœ… E-mail ajoutÃ© Ã  la base de donnÃ©es")

def afficher_emails():
    """Affiche les e-mails stockÃ©s dans la base."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM emails")
    emails = cursor.fetchall()
    conn.close()

    if not emails:
        print("ðŸ“­ Aucun e-mail enregistrÃ©.")
    else:
        print("\nðŸ“© **E-MAILS ENREGISTRÃ‰S** ðŸ“©")
        for email in emails:
            print(f"ðŸ“¬ Sujet: {email[1]}\nðŸ“¨ ExpÃ©diteur: {email[2]}\nðŸ“… Date: {email[3]}\nðŸ“œ Contenu: {email[4][:200]}...")
            print("-" * 50)

# âœ… Run only when executing this file directly
if __name__ == "__main__":
    creer_base()
    afficher_emails()